# -*- coding: utf-8 -*-
"""
This module is designed to run PELE energy calculations from clustered results of a 
previous PELE induced fit simulation.
"""

__author__ = "Ignasi Puch-Giner"
__maintainer__ = "Ignasi Puch-Giner"
__email__ = "ignasi.puchginer@bsc.es"

import sys
import os
import pathlib 
import argparse
import shutil
import time
from distutils.dir_util import copy_tree
import numpy as np

def parse_args(args):
    """
    It parses the command-line arguments.
    Parameters
    ----------
    args : list[str]
        List of command-line arguments to parse
    Returns
    -------
    parsed_args : argparse.Namespace
        It contains the command-line arguments that are supplied by the user
    """

    parser = argparse.ArgumentParser()

    parser.add_argument("-d", "--directory", type=str, dest = "input_folder",\
        default = 'LIG_Pele', help="Name of the directory where the simulation\
        is located.")
    parser.add_argument("-r", "--residue_name", type=str, dest = "residue_name",\
        default = 'LIG', help="Ligand's residue name.")
    parser.add_argument("-cl", "--clusters_folder", type=str, dest = "clusters_folder",\
        default = 'results', help="Name of the directory containing the folder: clusters.")
    parser.add_argument("-co", "--conf_file_name", type=str, dest = "conf_file_name",\
        default = 'pele', help="Name of the .conf file used for the simulation.")
    parser.add_argument("-a", "--action", type=str, dest = "action",\
        default = 'generate', help="Command to let know the script the action you want: generate or analyze.")

    parsed_args = parser.parse_args(args)

    return parsed_args

def linen_results(input_folder,
                  residue_name, 
                  clusters_folder,
                  conf_file_name):
    """
    It prepares everything to perform a PELE energy calculation 
    of all the clustered positions of a previous induced fit 
    PELE simulation.

    Parameters
    ----------
    input_folder : str
        The path to the directory created by the induced fit simulation.
    residue_name : str
        Residue name of the ligand in the pdb of each cluster.
    clusters_folder : str
        Name of the directory where the directory clusters is located (results/analysis).
    conf_file_name: str
        Name of the .conf file used to run pele (not adaptive.conf).
    """

    def path_definer(input_folder,
                     clusters_folder):

        """
        Defines all the paths that are going to be used

        Parameters
        ----------
        input_folder : str
            The path to the directory created by the induced fit simulation.
        clusters_folder : str
            Name of the directory where the directory clusters is located (results/analysis).

        Returns
        -------
        path_previous_simulation: str
            The path to the directory generated by the simulation we want to analyze the clusters
            from.
        path_clusters : str
            The path to the directory containing the pdbs of the representative poses for each
            cluster.
        path_energies_input : str 
            The path to the generated directory containing the input proportioned.
        path_energies_simulation : str
            The path to the generated directory containing all the necessary files to perform the
            PELE energy calculation.
        """        
        
        path = str(pathlib.Path().absolute())
        path_previous_simulation = path + '/' + input_folder
        path_results = path_previous_simulation + '/' + clusters_folder
        path_clusters = path_results + '/clusters' 

        if os.path.isdir(path_previous_simulation) == False:
            raise Exception('PathError: There is no folder with this name: ' + path_previous_simulation + '. Please check the path and the folder name.')

        files = os.listdir(path_previous_simulation)

        path_energies = path + '/' + residue_name + '_linen'
        path_energies_input = path_energies + '/' + 'input'
        path_energies_simulation = path_energies + '/' + 'simulation'

        if  os.path.exists(path_energies) == False:
            os.mkdir(path_energies)

        if  os.path.exists(path_energies_input) == False:
            os.mkdir(path_energies_input)

        if  os.path.exists(path_energies_simulation) == False:
            os.mkdir(path_energies_simulation)

        return  path_previous_simulation, path_clusters, path_energies_input, path_energies_simulation

    
    path_previous_simulation, path_clusters, path_energies_input, path_energies_simulation = path_definer(input_folder,clusters_folder)

    print(' ')
    print('*******************************************************************')
    print('*                          peleLInEn                              *')
    print('* --------------------------------------------------------------- *')
    print('*      Ligand\'s internal energy from induced fit results          *')
    print('*******************************************************************')
    print(' ')

    cluster_files = []
    labels = []

    # Storing information and copying files
    if os.path.isdir(path_clusters): 

        files = os.listdir(path_clusters)

        for document in files: 

            if 'cluster' in document and '.pdb' in document:

                cluster_files.append(os.path.join(path_energies_simulation,document))
                labels.append((document.split('cluster_'))[1].split('.pdb')[0])
                shutil.copy(os.path.join(path_clusters,document), path_energies_input)

    # List of clusters' letters for the run_file
    run_file_labels = ' '.join(labels)

    #
    print(' -   Number of clusters obtained in the simulation:',len(labels))
    #

    # Removing the protein from the pdbs.
    clusters = os.listdir(path_energies_input)

    for cluster in clusters:

        with open(os.path.join(path_energies_input,cluster)) as filein:

            lines = (l for l in filein if residue_name in l)
            new_path = path_energies_simulation + '/' + cluster.split('.pdb')[0]
            path_DataLocal = path_energies_simulation + '/DataLocal'

            if  os.path.exists(new_path) == False:
                os.mkdir(new_path)

            if  os.path.exists(path_DataLocal) == False:
                os.mkdir(path_DataLocal)

            copy_tree(os.path.join(path_previous_simulation,'DataLocal'), path_DataLocal)

            with open(os.path.join(new_path,cluster), 'w') as fileout:

                fileout.writelines(lines)


    # Copying .conf document and extracting information
    files =  files = os.listdir(path_previous_simulation)

    #
    print(' -   Extracting information from ' + conf_file_name + '.conf.' )
    #

    for document in files:

        if conf_file_name + '.conf' in document:

            with open (os.path.join(path_previous_simulation,document)) as filein:

                for line in filein:

                    if "ForceField" in line:

                        line = line.split(':')
                        line = line[1].split('     ')
                        line = line[0].split('"')
                        forcefield = line[1]

                    elif "VDGBNP" in line:

                        solvent = 'VDGBNP'

                    elif "OBC" in line:

                        solvent = 'OBC'

    #
    print('     -   Forcefield used:', forcefield + '.' )
    print('     -   Solvent model used:', solvent + '.' )
    #

    # Generating all the necessary control files
    cont = 0

    #
    print(' -   Generating control files for the energy calculation.' )
    #

    for label in labels:

        new_path = os.path.join(path_energies_simulation + '/cluster_' + label)

        with open (os.path.join(new_path,'energy' + label + '.conf'), 'w') as fileout:

            fileout.writelines(
            '{\n'
            '   "licenseDirectoryPath" : "/gpfs/projects/bsc72/PELE++/license",'
            '\n'
            '   "Initialization" : {\n'
            '      "Complex" : {\n'
            '         "files" : [\n'
            '            {\n'
            '               "path": "' + new_path + '/cluster_' + label + '.pdb"\n'
            '            }\n'
            '         ]\n'
            '      },\n'
            '      "ForceField" : "' + forcefield + '",\n'
            '      "Solvent" : {\n'
            '         "ionicStrength" : 0.250,\n'
            '         "solventType" : "' + solvent + '",\n'
            '         "useDebyeLength" : true\n'
            '      }\n'
            '   },\n'
            '   "commands" : [\n'
            '      {\n'
            '       "commandType":"energyComputation"\n'
            '      }\n'
            '   ]\n'
            '}\n'
            )

        cont += 1

    with open (os.path.join(path_energies_simulation,'run'), 'w') as fileout:

        fileout.writelines(
        '#!/bin/bash\n'
        '#SBATCH -J PELEne\n'
        '#SBATCH --output=PELEne.out\n'
        '#SBATCH --error=PELEne.err\n'
        '#SBATCH --qos=debug\n'
        '#SBATCH --time=00:30:00\n'
        '\n'
        'module purge\n'
        'module load intel mkl impi gcc\n'
        'module load impi\n'
        'module load boost/1.64.0\n'
        '\n'
        'list="' + run_file_labels + '"\n'
        '\n'
        'for i in $list\n'
        'do\n'
        '\n'
        '    echo " --------------------------------------------------------------------"\n'
        '    echo "|                            CLUSTER $i                              |"\n'
        '    echo " --------------------------------------------------------------------"\n'
        '    /gpfs/projects/bsc72/PELE++/mniv/V1.7.1/bin/PELE-1.7.1_serial ' + path_energies_simulation + '/cluster_${i}/energy${i}.conf\n'
        '    echo " "\n'
        '    echo "**********************************************************************"\n'
        '    echo "**********************************************************************"\n'
        '    echo " "\n'
        '\n'
        'done\n'
        )



    #
    print(' ')
    print('------------------------------ INFO -------------------------------')
    print(' (1) ')
    print(' -   To run the energy calculation for all the clusters:')
    print('     :> cd ' + residue_name + '_linen/simulation')
    print('     :> sbatch run')
    print(' -   Results are stored in PELEne.out.')
    print(' (2) ')
    print(' -   To gather the results in a csv file:')
    print(' -   Go to ' + residue_name + '_linen/simulation directory.')
    print('     :> python /path/to/code/pelelinen.py -a analyze')
    print(' -   Results are stored in energy.csv.')
    print(' ')
    print('-------------------------------------------------------------------')

def linen_analyze():

    """
    It gathers the results obtained from the PELE calculation.
    """

    path = str(pathlib.Path().absolute())

    lineclusters = []
    linenergies = []

    with open (os.path.join(path,'PELEne.out'),'r') as filein:

        for line in filein:

            if 'CLUSTER' in line:

                line = line.split('CLUSTER')
                line = line[1].strip()
                lineclusters.append(line[0])

            if 'ENERGY VACUUM + SGB + CONSTRAINTS + SELF + NON POLAR:' in line:

                line = line.split('ENERGY VACUUM + SGB + CONSTRAINTS + SELF + NON POLAR:')
                linenergies.append(float(line[1].strip()))

        sorted_clusters = [x for _, x in sorted(zip(linenergies, lineclusters))]
        sorted_energies = sorted(linenergies)

    sorted_energies_corrected = np.array(sorted_energies) - min(linenergies)

    with open('energy.csv', 'w') as fileout:
        fileout.writelines(
        'Cluster,Internal energy,Internal energy change\n' 
        )

        for i in range(len(lineclusters)):

            fileout.write(str(sorted_clusters[i]) + ',' + str(sorted_energies[i]) + ',' + str(sorted_energies_corrected[i]) + '\n')

def main(args):
    """
    It reads the command-line arguments and runs linen_results.
    Parameters
    ----------
    args : argparse.Namespace
        It contains the command-line arguments that are supplied by the user
    Examples
    --------
    """

    if args.action == 'generate':

        linen_results(input_folder = args.input_folder,
                      residue_name = args.residue_name,
                      clusters_folder = args.clusters_folder,
                      conf_file_name = args.conf_file_name)

    elif args.action == 'analyze':

        linen_analyze()

    else: 
        raise('ActionError: The actions the script can perform are either: generate or analyze. ')


if __name__ == '__main__':

    args = parse_args(sys.argv[1:])
    main(args)

