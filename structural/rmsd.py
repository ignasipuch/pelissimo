# -*- coding: utf-8 -*-
"""
This script is designed to prepare an rmsd simulation with Frag code 
and the pele platform.
"""

__author__ = "Ignasi Puch-Giner"
__maintainer__ = "Ignasi Puch-Giner"
__email__ = "ignasi.puchginer@bsc.es"

import sys
import os
import pathlib
import argparse
import shutil

def parse_args(args):
    """
    Function
    ----------
    It parses the command-line arguments.
    Parameters
    ----------
    - args : list[str]
        List of command-line arguments to parse
    Returns
    ----------
    - parsed_args : argparse.Namespace
        It contains the command-line arguments that are supplied by the user
    """

    parser = argparse.ArgumentParser()

    parser.add_argument("-d", "--directory", type=str, dest="input_folder",
                        default='LIG_Pele', help="Name of the directory where the simulation\
                        is located.")
    parser.add_argument("-r", "--residue_name", type=str, dest="residue_name",
                        default='LIG', help="Ligand's residue name.")
    parser.add_argument("-i", "--iterations", type=int, dest="iterations",
                        default=None, help="Number of iterations in the simulation.")
    parser.add_argument("-pdbr", "--pdb_rmsd", type=str, dest="pdb_rmsd",
                        default=None, help="Original PDB with which the RMSD will be calculated.")

    parsed_args = parser.parse_args(args)

    return parsed_args


def rmsd_preparation(input_folder,
                     residue_name,
                     iterations,
                     pdb_rmsd):
    """
    Function
    ----------
    Prepares all the files necessary for the generation of a rmsd calculation.

    Parameters
    ----------
    - input_folder : str
        The path to the directory created by the induced fit simulation.
    - residue_name : str
        Residue name of the ligand in the pdb of each cluster.
    - iterations : int
        Number of iterations in the protein-ligand simulation.
    - pdb_rmsd : str
        Name of the pdb structure to calculate rmsd.
    """

    def path_definer(input_folder):
        """
        Function
        ----------
        Defines all the paths that are going to be used

        Parameters
        ----------
        - input_folder : str
            The path to the directory created by the induced fit simulation.

        Returns
        ----------
        - path : str
            The path to the working directory.
        - path_pl_clusters : str
            The path to the clustering folder generated by the platform of the 
            protein-ligand simulation.
        """

        path = str(pathlib.Path().absolute())

        path_pl_simulation = os.path.join(path, input_folder)

        if os.path.isdir(path_pl_simulation) == False:
            raise Exception('PathError: There is no folder with this name: ' +
                            path_pl_simulation + '. Please check the path and the folder name.')

        return path, path_pl_simulation

    def iteration_checker(input_folder,
                          iterations,
                          path_pl_simulation):
        """
        Function
        ----------
        Checks existance of the information about the number of iterations 
        of the protein ligand simulation by checking the flag -i, the adaptive.conf file
        and the output folder of the simulation.

        Parameters
        ----------
        - input_folder : str
            The path to the directory created by the induced fit simulation.
        - iterations : int
            Value introduced via the flag -i.
        - path_pl_clusters : str
            The path to the clustering folder generated by the platform of the 
            protein-ligand simulation.

        Returns
        ----------
        - iterations : int
            Number of itertions of the induced fit simulation to be done.
        """

        def conf_extraction(path_simulation,
                            file):
            """
            Function
            ----------
            Extracts iterations information from adaptive.conf

            Parameters
            ----------
            - path_simulation : str
                The path to the directory created by the induced fit simulation.
            - file : str
                Name of the file we want to check (adaptive.conf)

            Returns
            ----------
            - iterations : int
                Number of iterations of the induced fit simulation.
            """

            with open(os.path.join(path_simulation, file)) as filein:

                for line in filein:

                    if "iterations" in line:

                        iterations_string = line.split()[2]
                        iterations = int(iterations_string.split(',')[0])

            return iterations

        def output_extraction(path):
            """
            Function
            ----------
            Extracts iterations information from ../output

            Parameters
            ----------
            - path_simulation : str
                The path to the output directory in the folder created 
                by the induced fit simulation.

            Returns
            ----------
            - iterations : int
                Number of iterations of the induced fit simulation.
            """

            all_directories = os.listdir(os.path.join(path, 'output'))
            directories = [
                directory for directory in all_directories if directory.isnumeric()]

            if len(directories) == 0:

                iterations = 1

            else:

                iterations = len(directories) - 1

            return iterations

        if iterations == None:

            #
            print(' -   Number of iterations has not been given via the flag -i.')
            print('     -   Checking adaptive.conf in ' + input_folder + '.')
            #

            if os.path.isfile(os.path.join(path_pl_simulation, 'adaptive.conf')):

                iterations = conf_extraction(
                    path_pl_simulation, 'adaptive.conf')

                #    
                print('     -   Number of iterations found: ' + str(iterations))
                #

            else:

                #
                print('     -   No adaptive.conf found in ' + input_folder + '.')
                print('         -   Checking ' + input_folder + '/output.')
                #

                if os.path.isdir(os.path.join(path_pl_simulation, 'output')):

                    iterations = output_extraction(path_pl_simulation)

                    #
                    print('         -   Number of folders found: ' + str(iterations + 1))
                    #

                else:

                    #
                    print('\n'
                          '                              WARNING:                               \n'
                          '   No information about the number of iterations has been given via  \n'
                          '   the flag -i nor it can be obtined from the adaptive.conf or the   \n'
                          '   /output folder in case the simulation is already done.      \n'
                          '   \n'
                          '   Please, modify the newly generated run_rmsd in order to match     \n'
                          '   your simulation or rerun this script with the flag -i.\n'
                          )  
                    #              

                    iterations = 0

        return iterations

    def pdb_manager(pdb_rmsd,
                    path,
                    path_pl_simulation):
        """
        Function
        ----------
        Checks existance of the information about the pdb to perform the rmsd  
        calculation. If not given it is extracted from the induced fit simulation
        folder.

        Parameters
        ----------
        - pdb_rmsd : str
            Information given in the flag -pdbr.
        - path : str
            The path to the working directory.
        - path_pl_clusters : str
            The path to the clustering folder generated by the platform of the 
            protein-ligand simulation.

        Returns
        ----------
        - pdb_rmsd : str
            Name of the pdb structure to calculate rmsd.
        """

        if pdb_rmsd == None:

            #
            print(' -   No PDB srtucture was given.')
            print('     -   PDB structure obtained from input/ligand.pdb')
            #

            pdb_rmsd = 'input/ligand.pdb'
        
        else:

            #
            print(' -   PDB structure:', str(pdb_rmsd))
            #

        shutil.copy(os.path.join(path,pdb_rmsd), path_pl_simulation)

        return pdb_rmsd

    def write_files(residue_name,
                    iterations,
                    pdb_rmsd,
                    path_pl_simulation):
        """
        Function
        ----------
        Writes necessary files to run rmsd calculations.

        Parameters
        ----------
        - residue_name : str
            Residue name of the ligand in the pdb of each cluster.
        - iterations : int
            Number of iterations in the protein-ligand simulation.
        - pdb_rmsd : str
            Information given in the flag -pdbr.
        - path_pl_clusters : str
            The path to the clustering folder generated by the platform of the 
            protein-ligand simulation.

        Returns
        ----------
        - pdb_rmsd : str
            Name of the pdb structure to calculate rmsd.
        """
        
        #
        print(' -   Writing files.')
        #

        if iterations == 0:

            with open(os.path.join(path_pl_simulation, 'run_rmsd'), 'w') as fileout:

                fileout.writelines(
                    '#!/bin/bash\n'
                    '#SBATCH -J rmsd\n'
                    '#SBATCH --output=rmsd.out\n'
                    '#SBATCH --error=rmsd.err\n'
                    '#SBATCH --ntasks=48\n'
                    '#SBATCH --qos=debug\n'
                    '#SBATCH --time=00:30:00\n'
                    '\n'
                    'module purge\n'
                    'module load ANACONDA/2019.10\n'
                    'module load intel mkl impi gcc\n'
                    'module load impi\n'
                    'module load boost/1.64.0\n'
                    '\n'
                    'eval \"$(conda shell.bash hook)\"\n'
                    'conda activate /gpfs/projects/bsc72/conda_envs/platform/1.6.2\n'
                    '\n'
                    'python /gpfs/projects/bsc72/FragPELE/v3.1.0-beta/frag_pele/frag_pele/Analysis/rmsd_computer.py -p output -pdbr ' +
                    pdb_rmsd + ' -np 48 -rp report_ --resname ' + residue_name + '\n'
                )

        else:

            with open(os.path.join(path_pl_simulation, 'run_rmsd'), 'w') as fileout:

                fileout.writelines(
                    '#!/bin/bash\n'
                    '#SBATCH -J rmsd\n'
                    '#SBATCH --output=rmsd.out\n'
                    '#SBATCH --error=rmsd.err\n'
                    '#SBATCH --ntasks=48\n'
                    '#SBATCH --qos=debug\n'
                    '#SBATCH --time=00:30:00\n'
                    '\n'
                    'module purge\n'
                    'module load ANACONDA/2019.10\n'
                    'module load intel mkl impi gcc\n'
                    'module load impi\n'
                    'module load boost/1.64.0\n'
                    '\n'
                    'eval \"$(conda shell.bash hook)\"\n'
                    'conda activate /gpfs/projects/bsc72/conda_envs/platform/1.6.2\n'
                    '\n'
                    'for i in {0..' + str(iterations - 1) + '}\n'
                    '   do python /gpfs/projects/bsc72/FragPELE/v3.1.0-beta/frag_pele/frag_pele/Analysis/rmsd_computer.py -p output/$i -pdbr ' +
                    pdb_rmsd + ' -np 48 -rp report_ --resname ' + residue_name + '\n'
                    'done\n'
                )

    #
    print(' ')
    print('*******************************************************************')
    print('*                        RMSD preparation                         *')
    print('*******************************************************************')
    print(' ')
    #

    path, path_pl_simulation = path_definer(input_folder)

    iterations = iteration_checker(input_folder,
                                   iterations,
                                   path_pl_simulation)

    pdb_rmsd = pdb_manager(pdb_rmsd,
                           path,
                           path_pl_simulation)

    write_files(residue_name,
                iterations,
                pdb_rmsd,
                path_pl_simulation)

    #
    print(' ')
    print('------------------------------ INFO -------------------------------')
    print(' ')
    print(' -   run_rmsd has been generated.')
    print(' -   To perform a rmsd calculation:')
    print('     :> cd ' + input_folder)
    print('     :> sbatch run_rmsd')
    print(' -   The reports with rmsd calculation will be named rmsd_report.')
    print(' ')
    print('-------------------------------------------------------------------')


def main(args):
    """
    Function
    ----------
    It reads the command-line arguments and runs linen_results.
    Parameters
    ----------
    - args : argparse.Namespace
        It contains the command-line arguments that are supplied by the user
    """

    rmsd_preparation(input_folder=args.input_folder,
                     residue_name=args.residue_name,
                     iterations=args.iterations,
                     pdb_rmsd=args.pdb_rmsd)


if __name__ == '__main__':

    args = parse_args(sys.argv[1:])
    main(args)
